# -*- coding:ascii -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
STOP_RENDERING = runtime.STOP_RENDERING
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 10
_modified_time = 1517450641.310847
_enable_loop = True
_template_filename = u'/app/sickrage/gui/slick/views/config_postProcessing.mako'
_template_uri = u'config_postProcessing.mako'
_source_encoding = 'ascii'
_exports = [u'tabs', u'pages']



import six
import os.path
import datetime
import platform
import sickbeard
from sickbeard.common import MULTI_EP_STRINGS
from sickbeard import naming
from sickrage.helper.encoding import ek


def _mako_get_namespace(context, name):
    try:
        return context.namespaces[(__name__, name)]
    except KeyError:
        _mako_generate_namespaces(context)
        return context.namespaces[(__name__, name)]
def _mako_generate_namespaces(context):
    pass
def _mako_inherit(template, context):
    _mako_generate_namespaces(context)
    return runtime._inherit_from(context, u'/layouts/config.mako', _template_uri)
def render_body(context,**pageargs):
    __M_caller = context.caller_stack._push_frame()
    try:
        __M_locals = __M_dict_builtin(pageargs=pageargs)
        def tabs():
            return render_tabs(context._locals(__M_locals))
        int = context.get('int', UNDEFINED)
        bool = context.get('bool', UNDEFINED)
        sorted = context.get('sorted', UNDEFINED)
        def pages():
            return render_pages(context._locals(__M_locals))
        _ = context.get('_', UNDEFINED)
        __M_writer = context.writer()
        __M_writer(u'\n')
        __M_writer(u'\n\n')
        if 'parent' not in context._data or not hasattr(context._data['parent'], 'tabs'):
            context['self'].tabs(**pageargs)
        

        __M_writer(u'\n\n')
        if 'parent' not in context._data or not hasattr(context._data['parent'], 'pages'):
            context['self'].pages(**pageargs)
        

        __M_writer(u'\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_tabs(context,**pageargs):
    __M_caller = context.caller_stack._push_frame()
    try:
        def tabs():
            return render_tabs(context)
        _ = context.get('_', UNDEFINED)
        __M_writer = context.writer()
        __M_writer(u'\n    <li><a href="#post-processing">')
        __M_writer(unicode(_('Post-Processing')))
        __M_writer(u'</a></li>\n    <li><a href="#episode-naming">')
        __M_writer(unicode(_('Episode Naming')))
        __M_writer(u'</a></li>\n    <li><a href="#metadata">')
        __M_writer(unicode(_('Metadata')))
        __M_writer(u'</a></li>\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


def render_pages(context,**pageargs):
    __M_caller = context.caller_stack._push_frame()
    try:
        int = context.get('int', UNDEFINED)
        sorted = context.get('sorted', UNDEFINED)
        bool = context.get('bool', UNDEFINED)
        def pages():
            return render_pages(context)
        _ = context.get('_', UNDEFINED)
        __M_writer = context.writer()
        __M_writer(u'\n    <form id="configForm" action="savePostProcessing" method="post">\n\n        <!-- /Post-Processing //-->\n        <div id="post-processing" class="component-group">\n            <div class="row">\n                <div class="col-lg-3 col-md-4 col-sm-4 col-xs-12">\n                    <div class="component-group-desc">\n                        <h3>')
        __M_writer(unicode(_('Post-Processing')))
        __M_writer(u'</h3>\n                        <p>')
        __M_writer(unicode(_('Settings that dictate how SickRage should process completed downloads.')))
        __M_writer(u'</p>\n                    </div>\n                </div>\n                <div class="col-lg-9 col-md-8 col-sm-8 col-xs-12">\n                    <fieldset class="component-group-list">\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Enable')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="checkbox" name="process_automatically" id="process_automatically" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.PROCESS_AUTOMATICALLY)]))
        __M_writer(u'/>\n                                        <label for="process_automatically">')
        __M_writer(unicode(_('enable the automatic post processor to scan and process any files in your Post Processing Dir')))
        __M_writer(u'?</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <span><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('do not use if you use an external Post Processing script')))
        __M_writer(u'</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Post Processing Dir')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="text" name="tv_download_dir" id="tv_download_dir" value="')
        __M_writer(unicode(sickbeard.TV_DOWNLOAD_DIR))
        __M_writer(u'" class="form-control input-sm input350" autocapitalize="off" />\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <span>')
        __M_writer(unicode(_('the folder where your download client puts the completed TV downloads.')))
        __M_writer(u'</span>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <span><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('please use seperate downloading and completed folders in your download client if possible.')))
        __M_writer(u'</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Processing Method')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <select name="process_method" id="process_method" class="form-control input-sm input350" title="process_method">\n                                            ')
        process_method_text = {'copy': "Copy", 'move': "Move", 'hardlink': "Hard Link", 'symlink' : "Symbolic Link", 'symlink_reversed' : "Symbolic Link Reversed"} 
        
        __M_writer(u'\n')
        for curAction in ('copy', 'move', 'hardlink', 'symlink', 'symlink_reversed'):
            __M_writer(u'                                                <option value="')
            __M_writer(unicode(curAction))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[sickbeard.PROCESS_METHOD == curAction]))
            __M_writer(u'>')
            __M_writer(unicode(process_method_text[curAction]))
            __M_writer(u'</option>\n')
        __M_writer(u'                                        </select>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <span>')
        __M_writer(unicode(_('what method should be used to put files into the library?')))
        __M_writer(u'</span>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <span><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('if you keep seeding torrents after they finish, please avoid the \'move\' processing method to prevent errors.')))
        __M_writer(u'</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Auto Post-Processing Frequency')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="number" min="10" step="1" name="autopostprocessor_frequency" id="autopostprocessor_frequency" value="')
        __M_writer(unicode(sickbeard.AUTOPOSTPROCESSOR_FREQUENCY))
        __M_writer(u'" class="form-control input-sm input75" title="autopostprocessor_frequency"/>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label for="autopostprocessor_frequency" class="component-desc">')
        __M_writer(unicode(_('time in minutes to check for new files to auto post-process (min 10)')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Postpone post processing')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" name="postpone_if_sync_files" id="postpone_if_sync_files" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.POSTPONE_IF_SYNC_FILES)]))
        __M_writer(u'/>\n                                <label for="postpone_if_sync_files">')
        __M_writer(unicode(_('wait to process a folder if sync files are present.')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Sync File Extensions')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="text" name="sync_files" id="sync_files" value="')
        __M_writer(unicode(sickbeard.SYNC_FILES))
        __M_writer(u'" class="form-control input-sm input350" autocapitalize="off" title="sync_files"/>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <span class="component-desc">')
        __M_writer(unicode(_('comma seperated list of extensions or filename globs SickRage ignores when Post Processing')))
        __M_writer(u'</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Rename Episodes')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" name="rename_episodes" id="rename_episodes" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.RENAME_EPISODES)]))
        __M_writer(u'/>\n                                <label for="rename_episodes">')
        __M_writer(unicode(_('rename episode using the Episode Naming settings?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Create missing show directories')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" name="create_missing_show_dirs" id="create_missing_show_dirs" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.CREATE_MISSING_SHOW_DIRS)]))
        __M_writer(u'/>\n                                <label for="create_missing_show_dirs">')
        __M_writer(unicode(_('create missing show directories when they get deleted')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Add shows without directory')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" name="add_shows_wo_dir" id="add_shows_wo_dir" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.ADD_SHOWS_WO_DIR)]))
        __M_writer(u'/>\n                                <label for="add_shows_wo_dir">')
        __M_writer(unicode(_('add shows without creating a directory (not recommended)')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Move associated files')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" class="enabler" name="move_associated_files" id="move_associated_files" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.MOVE_ASSOCIATED_FILES)]))
        __M_writer(u'/>\n                                <label for="move_associated_files">')
        __M_writer(unicode(_('move associated (srt/srr/sfv/etc) files while post processing?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row" id="content_move_associated_files">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Rename .nfo file')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" name="nfo_rename" id="nfo_rename" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.NFO_RENAME)]))
        __M_writer(u'/>\n                                <label for="nfo_rename">')
        __M_writer(unicode(_('rename the original .nfo file to .nfo-orig to avoid conflicts?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Associated file extensions')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="text" name="allowed_extensions" id="allowed_extensions" value="')
        __M_writer(unicode(sickbeard.ALLOWED_EXTENSIONS))
        __M_writer(u'" class="form-control input-sm input350" autocapitalize="off" />\n                                        <label for="allowed_extensions">')
        __M_writer(unicode(_('comma separated list of associated file extensions SickRage should keep while post processing.')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label for="allowed_extensions">')
        __M_writer(unicode(_('leaving it empty means no associated files will be post processed')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Delete non associated files')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" name="delete_non_associated_files" id="delete_non_associated_files" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.DELETE_NON_ASSOCIATED_FILES)]))
        __M_writer(u'/>\n                                <label for="delete_non_associated_files">')
        __M_writer(unicode(_('delete non associated files while post processing?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Change File Date')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="checkbox" name="airdate_episodes" id="airdate_episodes" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.AIRDATE_EPISODES)]))
        __M_writer(u'/>\n                                        <label for="airdate_episodes">')
        __M_writer(unicode(_('set last modified filedate to the date that the episode aired?')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b> ')
        __M_writer(unicode(_('some systems may ignore this feature.')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Timezone for File Date')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <select name="file_timestamp_timezone" id="file_timestamp_timezone" class="form-control input-sm input350">\n')
        for curTimezone in (_('local'), _('network')):
            __M_writer(u'                                                <option value="')
            __M_writer(unicode(curTimezone))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[sickbeard.FILE_TIMESTAMP_TIMEZONE == curTimezone]))
            __M_writer(u'>')
            __M_writer(unicode(curTimezone))
            __M_writer(u'</option>\n')
        __M_writer(u'                                        </select>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label for="file_timestamp_timezone">')
        __M_writer(unicode(_('what timezone should be used to change File Date?')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <fieldset class="component-group-list">\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Unpack')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <label for="unpack" class="component-desc">\n                                        ')
        __M_writer(unicode(_('What to do with archived releases found in your <i>TV Download Dir</i>?')))
        __M_writer(u'\n                                    </label>\n                                </div>\n\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <select name="unpack" id="unpack" class="form-control input-sm input350" title="unpack">\n                                                <option value="0" ')
        __M_writer(unicode(('', 'selected="selected"')[int(sickbeard.UNPACK) == 0]))
        __M_writer(u'>\n                                                    ')
        __M_writer(unicode(_('Ignore (do not process contents)')))
        __M_writer(u'\n                                                </option>\n                                                <option value="1" ')
        __M_writer(unicode(('', 'selected="selected"')[int(sickbeard.UNPACK) == 1]))
        __M_writer(u'>\n                                                    ')
        __M_writer(unicode(_('Unpack (process contents)')))
        __M_writer(u'\n                                                </option>\n                                                <option value="2" ')
        __M_writer(unicode(('', 'selected="selected"')[int(sickbeard.UNPACK) == 2]))
        __M_writer(u'>\n                                                    ')
        __M_writer(unicode(_('Treat as video (process archive as-is)')))
        __M_writer(u'\n                                                </option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <span><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('\'Unpack\' only works with RAR archives')))
        __M_writer(u'</span>\n                                        </div>\n                                    </div>\n')
        if platform.system() in ('Windows', 'Microsoft'):
            __M_writer(u'                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <span><b>')
            __M_writer(unicode(_('Windows')))
            __M_writer(u':</b>&nbsp;')
            __M_writer(unicode(_('WinRar is required on windows')))
            __M_writer(u'</span>\n                                            </div>\n                                        </div>\n')
        __M_writer(u'                                </div>\n                            </div>\n                            <div id="content_unpack">\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                        <label class="component-title">')
        __M_writer(unicode(_('Unpack Directory')))
        __M_writer(u'</label>\n                                    </div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <input type="text" name="unpack_dir" id="unpack_dir" value="')
        __M_writer(unicode(sickbeard.UNPACK_DIR))
        __M_writer(u'" class="form-control\n                                                input-sm input350" autocapitalize="off" />\n                                            </div>\n                                        </div>\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <label for="unpack_dir">')
        __M_writer(unicode(_('Choose a path to unpack files, leave blank to unpack in download dir')))
        __M_writer(u'</label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                        <label class="component-title">')
        __M_writer(unicode(_('Unrar Location')))
        __M_writer(u'</label>\n                                    </div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <input type="text" name="unrar_tool" id="unrar_tool" value="')
        __M_writer(unicode(sickbeard.UNRAR_TOOL))
        __M_writer(u'" class="form-control\n                                                input-sm input350" autocapitalize="off" />\n                                            </div>\n                                        </div>\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <label for="unrar_tool">')
        __M_writer(unicode(_('add the path to unrar if it is not in the system path')))
        __M_writer(u'</label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                        <label class="component-title">')
        __M_writer(unicode(_('Alternate Unrar Tool')))
        __M_writer(u'</label>\n                                    </div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <input type="text" name="alt_unrar_tool" id="alt_unrar_tool" value="')
        __M_writer(unicode(sickbeard.ALT_UNRAR_TOOL))
        __M_writer(u'" class="form-control\n                                                input-sm input350" autocapitalize="off" />\n                                            </div>\n                                        </div>\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <label for="alt_unrar_tool">')
        __M_writer(unicode(_('add the path to an alternate unrar tool if it is not in the system path')))
        __M_writer(u'</label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                        <label class="component-title">')
        __M_writer(unicode(_('Delete RAR contents')))
        __M_writer(u'</label>\n                                    </div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <input type="checkbox" name="del_rar_contents" id="del_rar_contents" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.DELRARCONTENTS)]))
        __M_writer(u'/>\n                                                <label for="del_rar_contents">')
        __M_writer(unicode(_('delete content of RAR files, even if Process Method not set to move?')))
        __M_writer(u'</label>\n                                            </div>\n                                        </div>\n                                        <div class="row">\n                                            <div class="col-md-12">\n                                                <label><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('only working with RAR archive')))
        __M_writer(u'</label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </fieldset>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Don\'t delete empty folders')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="checkbox" name="no_delete" id="no_delete" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.NO_DELETE)]))
        __M_writer(u'/>\n                                        <label for="no_delete">')
        __M_writer(unicode(_('leave empty folders when Post Processing?')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('can be overridden using manual Post Processing')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Follow symbolic-links')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="checkbox" name="processor_follow_symlinks" id="processor_follow_symlinks"\n                                            ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.PROCESSOR_FOLLOW_SYMLINKS)]))
        __M_writer(u'/>\n                                        <label for="processor_follow_symlinks">')
        __M_writer(unicode(_('follow down symbolic links in download directory?')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label><b>')
        __M_writer(unicode(_('warning')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('<b>EXPERTS ONLY.</b><br>'
                                                'Enable only if you know what <b>circular symbolic links</b> are,<br>'
                                                'and can <b>verify that you have none</b>.')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Use icacls')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="checkbox" name="use_icacls" id="use_icacls" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.USE_ICACLS)]))
        __M_writer(u'/>\n                                        <label for="use_icacls">')
        __M_writer(unicode(_('Windows only')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label>')
        __M_writer(unicode(_('sets video permissions after using the move method in post processing')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Extra Scripts')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="text" name="extra_scripts" value="')
        __M_writer(unicode('|'.join(sickbeard.EXTRA_SCRIPTS)))
        __M_writer(u'" class="form-control input-sm input350" autocapitalize="off"  title="extra_script"/>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label>\n                                            ')
        __M_writer(unicode(_('see')))
        __M_writer(u'\n                                            <a href="https://github.com/SickRage/SickRage/wiki/Post-Processing#extra-scripts">\n                                                <span style="color:red;">Wiki</span>\n                                            </a>')
        __M_writer(unicode(_('for script arguments description and usage.')))
        __M_writer(u'\n                                        </label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </fieldset>\n                </div>\n            </div>\n        </div>\n\n        <!-- /Episode-Naming //-->\n        <div id="episode-naming" class="component-group">\n\n            <div class="row">\n                <div class="col-lg-3 col-md-4 col-sm-4 col-xs-12">\n                    <div class="component-group-desc">\n                        <h3>')
        __M_writer(unicode(_('Episode Naming')))
        __M_writer(u'</h3>\n                        <p>')
        __M_writer(unicode(_('How SickRage will name and sort your episodes.')))
        __M_writer(u'</p>\n                    </div>\n                </div>\n                <div class="col-lg-9 col-md-8 col-sm-8 col-xs-12">\n\n                    <fieldset class="component-group-list">\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label for="name_presets" class="component-title">')
        __M_writer(unicode(_('Name Pattern')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <select id="name_presets" class="form-control input-sm input350" title="name_presets">\n                                    ')
        is_custom = True 
        
        __M_writer(u'\n')
        for cur_preset in naming.name_presets:
            __M_writer(u'                                    ')
            tmp = naming.test_name(cur_preset, anime_type=3) 
            
            __M_writer(u'\n')
            if cur_preset == sickbeard.NAMING_PATTERN:
                __M_writer(u'                                        ')
                is_custom = False 
                
                __M_writer(u'\n')
            __M_writer(u'                                        <option id="')
            __M_writer(unicode(cur_preset))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[sickbeard.NAMING_PATTERN == cur_preset]))
            __M_writer(u'>')
            __M_writer(unicode(ek(os.path.join, tmp['dir'], tmp['name'])))
            __M_writer(u'</option>\n')
        __M_writer(u'                                    <option id="')
        __M_writer(unicode(sickbeard.NAMING_PATTERN))
        __M_writer(u'" ')
        __M_writer(unicode(('', 'selected="selected"')[bool(is_custom)]))
        __M_writer(u'>Custom...</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div id="content_name_presets">\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12"></div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <input type="text" name="naming_pattern" id="naming_pattern" value="')
        __M_writer(unicode(sickbeard.NAMING_PATTERN))
        __M_writer(u'" class="form-control input-sm input350" autocapitalize="off" title="naming_pattern"/>\n                                            <span class="displayshow-icon-legend" id="show_naming_key" title="')
        __M_writer(unicode(_('Toggle Naming Legend')))
        __M_writer(u'" class="legend" />\n                                        </div>\n                                    </div>\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <label><b>')
        __M_writer(unicode(_('note')))
        __M_writer(u':</b>&nbsp;')
        __M_writer(unicode(_('don\'t forget to add quality pattern. Otherwise after post-processing the episode will have UNKNOWN quality')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div id="naming_key" style="display: none;">\n                                <div class="horizontal-scroll">\n                                    <table class="Key">\n                                        <thead>\n                                            <tr>\n                                                <th class="align-right">')
        __M_writer(unicode(_('Meaning')))
        __M_writer(u'</th>\n                                                <th>')
        __M_writer(unicode(_('Pattern')))
        __M_writer(u'</th>\n                                                <th width="60%">')
        __M_writer(unicode(_('Result')))
        __M_writer(u'</th>\n                                            </tr>\n                                        </thead>\n                                        <tfoot>\n                                            <tr>\n                                                <th colspan="3">')
        __M_writer(unicode(_('Use lower case if you want lower case names (eg. %sn, %e.n, %q_n etc)')))
        __M_writer(u'</th>\n                                            </tr>\n                                        </tfoot>\n                                        <tbody>\n                                            <tr>\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u':</b></td>\n                                                <td>%SN</td>\n                                                <td>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td>&nbsp;</td>\n                                                <td>%S.N</td>\n                                                <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%S_N</td>\n                                                <td>')
        __M_writer(unicode(_('Show_Name')))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Season Number')))
        __M_writer(u':</b></td>\n                                                <td>%S</td>\n                                                <td>2</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%0S</td>\n                                                <td>02</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('XEM Season Number')))
        __M_writer(u':</b></td>\n                                                <td>%XS</td>\n                                                <td>2</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%0XS</td>\n                                                <td>02</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Episode Number')))
        __M_writer(u':</b></td>\n                                                <td>%E</td>\n                                                <td>3</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%0E</td>\n                                                <td>03</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('XEM Episode Number')))
        __M_writer(u':</b></td>\n                                                <td>%XE</td>\n                                                <td>3</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%0XE</td>\n                                                <td>03</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u':</b></td>\n                                                <td>%EN</td>\n                                                <td>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%E.N</td>\n                                                <td>')
        __M_writer(unicode(_('Episode.Name')))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td>&nbsp;</td>\n                                                <td>%E_N</td>\n                                                <td>')
        __M_writer(unicode(_('Episode_Name')))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Air Date')))
        __M_writer(u':</b></td>\n                                                <td>%M</td>\n                                                <td>')
        __M_writer(unicode(datetime.date.today().month))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td>&nbsp;</td>\n                                                <td>%D</td>\n                                                <td>')
        __M_writer(unicode(datetime.date.today().day))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%Y</td>\n                                                <td>')
        __M_writer(unicode(datetime.date.today().year))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Post-Processing Date')))
        __M_writer(u':</b></td>\n                                                <td>%CM</td>\n                                                <td>')
        __M_writer(unicode(datetime.date.today().month))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td>&nbsp;</td>\n                                                <td>%CD</td>\n                                                <td>')
        __M_writer(unicode(datetime.date.today().day))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%CY</td>\n                                                <td>')
        __M_writer(unicode(datetime.date.today().year))
        __M_writer(u'</td>\n                                            </tr>\n                                            <tr>\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Quality')))
        __M_writer(u':</b></td>\n                                                <td>%QN</td>\n                                                <td>720p BluRay</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td>&nbsp;</td>\n                                                <td>%Q.N</td>\n                                                <td>720p.BluRay</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%Q_N</td>\n                                                <td>720p_BluRay</td>\n                                            </tr>\n                                            <tr>\n                                                <td class="align-right"><b>')
        __M_writer(unicode(_('Scene Quality')))
        __M_writer(u':</b></td>\n                                                <td>%SQN</td>\n                                                <td>720p HDTV x264</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td>&nbsp;</td>\n                                                <td>%SQ.N</td>\n                                                <td>720p.HDTV.x264</td>\n                                            </tr>\n                                            <tr>\n                                                <td>&nbsp;</td>\n                                                <td>%SQ_N</td>\n                                                <td>720p_HDTV_x264</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="Multi-EP style is ignored"></i> <b>')
        __M_writer(unicode(_('Release Name')))
        __M_writer(u':</b></td>\n                                                <td>%RN</td>\n                                                <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'.S02E03.HDTV.XviD-RLSGROUP</td>\n                                            </tr>\n                                            <tr>\n                                                <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="\'')
        __M_writer(unicode(_('SickRage\' is used in place of RLSGROUP if it could not be properly detected')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Group')))
        __M_writer(u':</b></td>\n                                                <td>%RG</td>\n                                                <td>RLSGROUP</td>\n                                            </tr>\n                                            <tr class="even">\n                                                <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('If episode is proper/repack add \'proper\' to name.')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Type')))
        __M_writer(u':</b></td>\n                                                <td>%RT</td>\n                                                <td>PROPER</td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Multi-Episode Style')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <select id="naming_multi_ep" name="naming_multi_ep" class="form-control input-sm input350" title="naming_multi_ep">\n')
        for cur_multi_ep in sorted(six.iteritems(MULTI_EP_STRINGS), key=lambda x: x[1]):
            __M_writer(u'                                        <option value="')
            __M_writer(unicode(cur_multi_ep[0]))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[cur_multi_ep[0] == sickbeard.NAMING_MULTI_EP]))
            __M_writer(u'>')
            __M_writer(unicode(cur_multi_ep[1]))
            __M_writer(u'</option>\n')
        __M_writer(u'                                </select>\n                            </div>\n                        </div>\n\n                        <div id="naming_example_div">\n                            <div class="row">\n                                <div class="col-md-12">\n                                    <h3>')
        __M_writer(unicode(_('Single-EP Sample')))
        __M_writer(u':</h3>\n                                    <div class="example">\n                                        <span class="jumbo" id="naming_example">&nbsp;</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div id="naming_example_multi_div">\n                            <div class="row">\n                                <div class="col-md-12">\n                                    <h3>')
        __M_writer(unicode(_('Multi-EP sample')))
        __M_writer(u':</h3>\n                                    <div class="example">\n                                        <span class="jumbo" id="naming_example_multi">&nbsp;</span>\n                                    </div>\n                                </div>\n                            </div>\n                            <br/>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Strip Show Year')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <input type="checkbox" id="naming_strip_year"  name="naming_strip_year" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.NAMING_STRIP_YEAR)]))
        __M_writer(u'/>\n                                        <label for="naming_strip_year">')
        __M_writer(unicode(_('remove the TV show\'s year when renaming the file?')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label>')
        __M_writer(unicode(_('only applies to shows that have year inside parentheses')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Custom Air-By-Date')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" class="enabler" id="naming_custom_abd" name="naming_custom_abd" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.NAMING_CUSTOM_ABD)]))
        __M_writer(u'/>\n                                <label for="naming_custom_abd">')
        __M_writer(unicode(_('name air-by-date shows differently than regular shows?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div id="content_naming_custom_abd">\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Name Pattern')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <select id="name_abd_presets" class="form-control input-sm input350" title="name_adb_presets">\n                                        ')
        is_abd_custom = True 
        
        __M_writer(u'\n')
        for cur_preset in naming.name_abd_presets:
            __M_writer(u'                                        ')
            tmp = naming.test_name(cur_preset) 
            
            __M_writer(u'\n')
            if cur_preset == sickbeard.NAMING_ABD_PATTERN:
                __M_writer(u'                                            ')
                is_abd_custom = False 
                
                __M_writer(u'\n')
            __M_writer(u'                                            <option id="')
            __M_writer(unicode(cur_preset))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[sickbeard.NAMING_ABD_PATTERN == cur_preset]))
            __M_writer(u'>')
            __M_writer(unicode(ek(os.path.join, tmp['dir'], tmp['name'])))
            __M_writer(u'</option>\n')
        __M_writer(u'                                        <option id="')
        __M_writer(unicode(sickbeard.NAMING_ABD_PATTERN))
        __M_writer(u'" ')
        __M_writer(unicode(('', 'selected="selected"')[bool(is_abd_custom)]))
        __M_writer(u'>Custom...</option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <!-- naming_abd_custom -->\n                            <div id="naming_abd_custom">\n\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12"></div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <input type="text" name="naming_abd_pattern" id="naming_abd_pattern" value="')
        __M_writer(unicode(sickbeard.NAMING_ABD_PATTERN))
        __M_writer(u'"\n                                               class="form-control input-sm input350" autocapitalize="off" title="naming_abd_pattern"/>\n                                        <span class="displayshow-icon-legend" id="show_naming_abd_key" title="')
        __M_writer(unicode(_('Toggle ABD Naming Legend')))
        __M_writer(u'" class="legend" />\n                                    </div>\n                                </div>\n\n                                <div id="naming_abd_key" style="display: none;">\n                                    <div class="horizontal-scroll">\n                                        <table class="Key">\n                                            <thead>\n                                                <tr>\n                                                    <th class="align-right">')
        __M_writer(unicode(_('Meaning')))
        __M_writer(u'</th>\n                                                    <th>')
        __M_writer(unicode(_('Pattern')))
        __M_writer(u'</th>\n                                                    <th width="60%">')
        __M_writer(unicode(_('Result')))
        __M_writer(u'</th>\n                                                </tr>\n                                            </thead>\n                                            <tfoot>\n                                                <tr>\n                                                    <th colspan="3">')
        __M_writer(unicode(_('Use lower case if you want lower case names (eg. %sn, %e.n, %q_n etc)')))
        __M_writer(u'</th>\n                                                </tr>\n                                            </tfoot>\n                                            <tbody>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u':</b></td>\n                                                    <td>%SN</td>\n                                                    <td>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%S.N</td>\n                                                    <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%S_N</td>\n                                                    <td>')
        __M_writer(unicode(_('Show_Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Regular Air Date')))
        __M_writer(u':</b></td>\n                                                    <td>%AD</td>\n                                                    <td>2010 03 09</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%A.D</td>\n                                                    <td>2010.03.09</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%A_D</td>\n                                                    <td>2010_03_09</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%A-D</td>\n                                                    <td>2010-03-09</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u':</b></td>\n                                                    <td>%EN</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%E.N</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode.Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%E_N</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode_Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Quality')))
        __M_writer(u':</b></td>\n                                                    <td>%QN</td>\n                                                    <td>720p BluRay</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%Q.N</td>\n                                                    <td>720p.BluRay</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%Q_N</td>\n                                                    <td>720p_BluRay</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Year')))
        __M_writer(u':</b></td>\n                                                    <td>%Y</td>\n                                                    <td>2010</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Month')))
        __M_writer(u':</b></td>\n                                                    <td>%M</td>\n                                                    <td>3</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right">&nbsp;</td>\n                                                    <td>%0M</td>\n                                                    <td>03</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Day')))
        __M_writer(u':</b></td>\n                                                    <td>%D</td>\n                                                    <td>9</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right">&nbsp;</td>\n                                                    <td>%0D</td>\n                                                    <td>09</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('Multi-EP style is ignored')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Name')))
        __M_writer(u':</b></td>\n                                                    <td>%RN</td>\n                                                    <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'.2010.03.09.HDTV.XviD-RLSGROUP</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="\'')
        __M_writer(unicode(_('SickRage\' is used in place of RLSGROUP if it could not be properly detected')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Group')))
        __M_writer(u':</b></td>\n                                                    <td>%RG</td>\n                                                    <td>RLSGROUP</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('If episode is proper/repack add \'proper\' to name.')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Type')))
        __M_writer(u':</b></td>\n                                                    <td>%RT</td>\n                                                    <td>PROPER</td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            </div>\n                            <!-- /naming_abd_custom -->\n\n                            <div id="naming_abd_example_div">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <h3>Sample:</h3>\n                                        <div class="example">\n                                            <span class="jumbo" id="naming_abd_example">&nbsp;</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                            </div>\n\n                        </div>\n                        <!-- /naming_abd_different -->\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Custom Sports')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" class="enabler" id="naming_custom_sports" name="naming_custom_sports" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.NAMING_CUSTOM_SPORTS)]))
        __M_writer(u'/>\n                                <label for="naming_custom_sports" class="component-desc">')
        __M_writer(unicode(_('name sports shows differently than regular shows?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div id="content_naming_custom_sports">\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Name Pattern')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <select id="name_sports_presets" class="form-control input-sm input350" title="name_sports_presets">\n                                        ')
        is_sports_custom = True 
        
        __M_writer(u'\n')
        for cur_preset in naming.name_sports_presets:
            __M_writer(u'                                        ')
            tmp = naming.test_name(cur_preset) 
            
            __M_writer(u'\n')
            if cur_preset == sickbeard.NAMING_SPORTS_PATTERN:
                __M_writer(u'                                            ')
                is_sports_custom = False 
                
                __M_writer(u'\n')
            __M_writer(u'                                            <option id="')
            __M_writer(unicode(cur_preset))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[sickbeard.NAMING_SPORTS_PATTERN == cur_preset]))
            __M_writer(u'>')
            __M_writer(unicode(ek(os.path.join, tmp['dir'], tmp['name'])))
            __M_writer(u'</option>\n')
        __M_writer(u'                                        <option id="')
        __M_writer(unicode(sickbeard.NAMING_SPORTS_PATTERN))
        __M_writer(u'" ')
        __M_writer(unicode(('', 'selected="selected"')[bool(is_sports_custom)]))
        __M_writer(u'>Custom...</option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div id="naming_sports_custom">\n\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12"></div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <input type="text" name="naming_sports_pattern" id="naming_sports_pattern" value="')
        __M_writer(unicode(sickbeard.NAMING_SPORTS_PATTERN))
        __M_writer(u'"\n                                               class="form-control input-sm input350" autocapitalize="off" title="naming_sports_pattern" />\n                                        <span class="displayshow-icon-legend" id="show_naming_sports_key" title="')
        __M_writer(unicode(_('Toggle Sports Naming Legend')))
        __M_writer(u'" class="legend" />\n                                    </div>\n                                </div>\n\n                                <div id="naming_sports_key" style="display: none;">\n                                    <div class="horizontal-scroll">\n                                        <table class="Key">\n                                            <thead>\n                                                <tr>\n                                                    <th class="align-right">')
        __M_writer(unicode(_('Meaning')))
        __M_writer(u'</th>\n                                                    <th>')
        __M_writer(unicode(_('Pattern')))
        __M_writer(u'</th>\n                                                    <th width="60%">')
        __M_writer(unicode(_('Result')))
        __M_writer(u'</th>\n                                                </tr>\n                                            </thead>\n                                            <tfoot>\n                                                <tr>\n                                                    <th colspan="3">')
        __M_writer(unicode(_('Use lower case if you want lower case names (eg. %sn, %e.n, %q_n etc)')))
        __M_writer(u'</th>\n                                                </tr>\n                                            </tfoot>\n                                            <tbody>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u':</b></td>\n                                                    <td>%SN</td>\n                                                    <td>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%S.N</td>\n                                                    <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%S_N</td>\n                                                    <td>')
        __M_writer(unicode(_('Show_Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Sports Air Date')))
        __M_writer(u':</b></td>\n                                                    <td>%AD</td>\n                                                    <td>9 Mar 2011</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%A.D</td>\n                                                    <td>9.Mar.2011</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%A_D</td>\n                                                    <td>9_Mar_2011</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%A-D</td>\n                                                    <td>9-Mar-2011</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u':</b></td>\n                                                    <td>%EN</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%E.N</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode.Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%E_N</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode_Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Quality')))
        __M_writer(u':</b></td>\n                                                    <td>%QN</td>\n                                                    <td>720p BluRay</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%Q.N</td>\n                                                    <td>720p.BluRay</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%Q_N</td>\n                                                    <td>720p_BluRay</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Year')))
        __M_writer(u':</b></td>\n                                                    <td>%Y</td>\n                                                    <td>2010</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Month')))
        __M_writer(u':</b></td>\n                                                    <td>%M</td>\n                                                    <td>3</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right">&nbsp;</td>\n                                                    <td>%0M</td>\n                                                    <td>03</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Day')))
        __M_writer(u':</b></td>\n                                                    <td>%D</td>\n                                                    <td>9</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right">&nbsp;</td>\n                                                    <td>%0D</td>\n                                                    <td>09</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('Multi-EP style is ignored')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Name')))
        __M_writer(u':</b></td>\n                                                    <td>%RN</td>\n                                                    <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'.9th.Mar.2011.HDTV.XviD-RLSGROUP</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="\'')
        __M_writer(unicode(_('SickRage\' is used in place of RLSGROUP if it could not be properly detected')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Group')))
        __M_writer(u':</b></td>\n                                                    <td>%RG</td>\n                                                    <td>RLSGROUP</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('If episode is proper/repack add \'proper\' to name.')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Type')))
        __M_writer(u':</b></td>\n                                                    <td>%RT</td>\n                                                    <td>PROPER</td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            </div>\n                            <!-- /naming_sports_custom -->\n\n                            <div id="naming_sports_example_div">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <h3>Sample:</h3>\n                                        <div class="example">\n                                            <span class="jumbo" id="naming_sports_example">&nbsp;</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br/>\n                            </div>\n\n                        </div>\n                        <!-- /naming_sports_different -->\n\n                        <!-- naming_anime_custom -->\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Custom Anime')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                <input type="checkbox" class="enabler" id="naming_custom_anime" name="naming_custom_anime" ')
        __M_writer(unicode(('', 'checked="checked"')[bool(sickbeard.NAMING_CUSTOM_ANIME)]))
        __M_writer(u'/>\n                                <label for="naming_custom_anime">')
        __M_writer(unicode(_('name anime shows differently than regular shows?')))
        __M_writer(u'</label>\n                            </div>\n                        </div>\n\n                        <div id="content_naming_custom_anime">\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Name Pattern')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <select id="name_anime_presets" class="form-control input-sm input350">\n                                        ')
        is_anime_custom = True 
        
        __M_writer(u'\n')
        for cur_preset in naming.name_anime_presets:
            __M_writer(u'                                        ')
            tmp = naming.test_name(cur_preset) 
            
            __M_writer(u'\n')
            if cur_preset == sickbeard.NAMING_ANIME_PATTERN:
                __M_writer(u'                                            ')
                is_anime_custom = False 
                
                __M_writer(u'\n')
            __M_writer(u'                                            <option id="')
            __M_writer(unicode(cur_preset))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected"')[cur_preset == sickbeard.NAMING_ANIME_PATTERN]))
            __M_writer(u'>')
            __M_writer(unicode(ek(os.path.join, tmp['dir'], tmp['name'])))
            __M_writer(u'</option>\n')
        __M_writer(u'                                        <option id="')
        __M_writer(unicode(sickbeard.NAMING_ANIME_PATTERN))
        __M_writer(u'" ')
        __M_writer(unicode(('', 'selected="selected"')[bool(is_anime_custom)]))
        __M_writer(u'>Custom...</option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div id="naming_anime_custom">\n\n                                <div class="field-pair row">\n                                    <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12"></div>\n                                    <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                        <input type="text" name="naming_anime_pattern" id="naming_anime_pattern" value="')
        __M_writer(unicode(sickbeard.NAMING_ANIME_PATTERN))
        __M_writer(u'"\n                                               class="form-control input-sm input350" autocapitalize="off" title="naming_anime_pattern" />\n                                        <span class="displayshow-icon-legend" id="show_naming_anime_key" title="')
        __M_writer(unicode(_('Toggle Anime Naming Legend')))
        __M_writer(u'" class="legend"/>\n                                    </div>\n                                </div>\n\n                                <div id="naming_anime_key" style="display: none;">\n                                    <div class="horizontal-scroll">\n                                        <table class="Key">\n                                            <thead>\n                                                <tr>\n                                                    <th class="align-right">')
        __M_writer(unicode(_('Meaning')))
        __M_writer(u'</th>\n                                                    <th>Pattern</th>\n                                                    <th width="60%">')
        __M_writer(unicode(_('Result')))
        __M_writer(u'</th>\n                                                </tr>\n                                            </thead>\n                                            <tfoot>\n                                                <tr>\n                                                    <th colspan="3">')
        __M_writer(unicode(_('Use lower case if you want lower case names (eg. %sn, %e.n, %q_n etc)')))
        __M_writer(u'</th>\n                                                </tr>\n                                            </tfoot>\n                                            <tbody>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u':</b></td>\n                                                    <td>%SN</td>\n                                                    <td>')
        __M_writer(unicode(_('Show Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%S.N</td>\n                                                    <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%S_N</td>\n                                                    <td>')
        __M_writer(unicode(_('Show_Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Season Number')))
        __M_writer(u':</b></td>\n                                                    <td>%S</td>\n                                                    <td>2</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%0S</td>\n                                                    <td>02</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('>XEM Season Number')))
        __M_writer(u':</b></td>\n                                                    <td>%XS</td>\n                                                    <td>2</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%0XS</td>\n                                                    <td>02</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Episode Number')))
        __M_writer(u':</b></td>\n                                                    <td>%E</td>\n                                                    <td>3</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%0E</td>\n                                                    <td>03</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('XEM Episode Number')))
        __M_writer(u':</b></td>\n                                                    <td>%XE</td>\n                                                    <td>3</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%0XE</td>\n                                                    <td>03</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u':</b></td>\n                                                    <td>%EN</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%E.N</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode.Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%E_N</td>\n                                                    <td>')
        __M_writer(unicode(_('Episode_Name')))
        __M_writer(u'</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><b>')
        __M_writer(unicode(_('Quality')))
        __M_writer(u':</b></td>\n                                                    <td>%QN</td>\n                                                    <td>720p BluRay</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td>&nbsp;</td>\n                                                    <td>%Q.N</td>\n                                                    <td>720p.BluRay</td>\n                                                </tr>\n                                                <tr>\n                                                    <td>&nbsp;</td>\n                                                    <td>%Q_N</td>\n                                                    <td>720p_BluRay</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('Multi-EP style is ignored')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Name')))
        __M_writer(u':</b></td>\n                                                    <td>%RN</td>\n                                                    <td>')
        __M_writer(unicode(_('Show.Name')))
        __M_writer(u'.S02E03.HDTV.XviD-RLSGROUP</td>\n                                                </tr>\n                                                <tr>\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="\'')
        __M_writer(unicode(_('SickRage\' is used in place of RLSGROUP if it could not be properly detected')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Group')))
        __M_writer(u':</b></td>\n                                                    <td>%RG</td>\n                                                    <td>RLSGROUP</td>\n                                                </tr>\n                                                <tr class="even">\n                                                    <td class="align-right"><i class="glyphicon glyphicon-info-sign" title="')
        __M_writer(unicode(_('If episode is proper/repack add \'proper\' to name.')))
        __M_writer(u'"></i> <b>')
        __M_writer(unicode(_('Release Type')))
        __M_writer(u':</b></td>\n                                                    <td>%RT</td>\n                                                    <td>PROPER</td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n\n                            </div>\n                            <!-- /naming_anime_custom -->\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Multi-Episode Style')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <select id="naming_anime_multi_ep" name="naming_anime_multi_ep" class="form-control input-sm input350" title="naming_anime_multi_ep">\n')
        for cur_multi_ep in sorted(six.iteritems(MULTI_EP_STRINGS), key=lambda x: x[1]):
            __M_writer(u'                                            <option value="')
            __M_writer(unicode(cur_multi_ep[0]))
            __M_writer(u'" ')
            __M_writer(unicode(('', 'selected="selected" class="selected"')[cur_multi_ep[0] == sickbeard.NAMING_ANIME_MULTI_EP]))
            __M_writer(u'>')
            __M_writer(unicode(cur_multi_ep[1]))
            __M_writer(u'</option>\n')
        __M_writer(u'                                    </select>\n                                </div>\n                            </div>\n\n                            <div id="naming_example_anime_div">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <h3>')
        __M_writer(unicode(_('Single-EP Anime Sample')))
        __M_writer(u':</h3>\n                                        <div class="example">\n                                            <span class="jumbo" id="naming_example_anime">&nbsp;</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                            </div>\n\n                            <div id="naming_example_multi_anime_div">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <h3>')
        __M_writer(unicode(_('Multi-EP Anime sample')))
        __M_writer(u':</h3>\n                                        <div class="example">\n                                            <span class="jumbo" id="naming_example_multi_anime">&nbsp;</span>\n                                        </div>\n                                    </div>\n                                </div>\n                                <br>\n                            </div>\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Add Absolute Number')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <input type="radio" name="naming_anime" id="naming_anime" value="1" ')
        __M_writer(unicode(('', 'checked="checked"')[sickbeard.NAMING_ANIME == 1]))
        __M_writer(u'/>\n                                            <label for="naming_anime">')
        __M_writer(unicode(_('add the absolute number to the season/episode format?')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <label>')
        __M_writer(unicode(_('only applies to anime. (eg. S15E45 - 310 vs S15E45)')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('Only Absolute Number')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <input type="radio" name="naming_anime" id="naming_anime_only" value="2" ')
        __M_writer(unicode(('', 'checked="checked"')[sickbeard.NAMING_ANIME == 2]))
        __M_writer(u'/>\n                                            <label for="naming_anime_only">')
        __M_writer(unicode(_('replace season/episode format with absolute number')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <label>')
        __M_writer(unicode(_('only applies to anime.')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class="field-pair row">\n                                <div class="col-lg-3 col-md-3 col-sm-4 col-xs-12">\n                                    <label class="component-title">')
        __M_writer(unicode(_('No Absolute Number')))
        __M_writer(u'</label>\n                                </div>\n                                <div class="col-lg-9 col-md-9 col-sm-8 col-xs-12 pull-right component-desc">\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <input type="radio" name="naming_anime" id="naming_anime_none" value="3" ')
        __M_writer(unicode(('', 'checked="checked"')[sickbeard.NAMING_ANIME in (3, None)]))
        __M_writer(u'/>\n                                            <label for="naming_anime_none">')
        __M_writer(unicode(_('don\'t include the absolute number')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                    <div class="row">\n                                        <div class="col-md-12">\n                                            <label>')
        __M_writer(unicode(_('only applies to anime.')))
        __M_writer(u'</label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <!-- /naming_anime_different -->\n                    </fieldset>\n\n                </div>\n            </div>\n        </div>\n\n        <!-- /Metadata// -->\n        <div id="metadata" class="component-group">\n            <div class="row">\n                <div class="col-lg-3 col-md-4 col-sm-4 col-xs-12">\n                    <div class="component-group-desc">\n                        <h3>')
        __M_writer(unicode(_('Metadata')))
        __M_writer(u'</h3>\n                        <p>')
        __M_writer(unicode(_('The data associated to the data. These are files associated to a TV show in the form of images and text that, when supported, will enhance the viewing experience.')))
        __M_writer(u'</p>\n                    </div>\n                </div>\n                <div class="col-lg-9 col-md-8 col-sm-8 col-xs-12">\n\n                    <fieldset class="component-group-list">\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-4 col-sm-5 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Metadata Type')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-8 col-sm-7 col-xs-12 component-desc">\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <select id="metadataType" class="form-control input-sm input350">\n')
        for (cur_name, cur_generator) in sorted(six.iteritems(sickbeard.metadata_provider_dict)):
            __M_writer(u'                                                <option value="')
            __M_writer(unicode(cur_generator.get_id()))
            __M_writer(u'">')
            __M_writer(unicode(cur_name))
            __M_writer(u'</option>\n')
        __M_writer(u'                                        </select>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label for="metadataType">')
        __M_writer(unicode(_('toggle metadata options that you wish to be created')))
        __M_writer(u'</label>\n                                    </div>\n                                </div>\n                                <div class="row">\n                                    <div class="col-md-12">\n                                        <label><b>')
        __M_writer(unicode(_('multiple targets may be used')))
        __M_writer(u'</b></label>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class="field-pair row">\n                            <div class="col-lg-3 col-md-4 col-sm-5 col-xs-12">\n                                <label class="component-title">')
        __M_writer(unicode(_('Select Metadata')))
        __M_writer(u'</label>\n                            </div>\n                            <div class="col-lg-9 col-md-8 col-sm-7 col-xs-12 component-desc">\n')
        for (cur_name, cur_generator) in six.iteritems(sickbeard.metadata_provider_dict):
            __M_writer(u'                                    ')

            cur_metadata_inst = sickbeard.metadata_provider_dict[cur_generator.name]
            cur_id = cur_generator.get_id()
                                                
            
            __M_writer(u'\n                                    <div class="metadataDiv" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'">\n                                        <div class="metadata_options_wrapper input350">\n                                            <div class="metadata_options">\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_show_metadata">\n                                                    <input type="checkbox" class="metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_show_metadata" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.show_metadata)]))
            __M_writer(u'/>\n                                                    &nbsp;Show Metadata\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_show_metadata">')
            __M_writer(unicode(cur_metadata_inst.eg_show_metadata))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_episode_metadata">\n                                                    <input type="checkbox" class="metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_episode_metadata" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.episode_metadata)]))
            __M_writer(u'/>\n                                                    &nbsp;Episode Metadata\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_episode_metadata">')
            __M_writer(unicode(cur_metadata_inst.eg_episode_metadata))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_fanart">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_fanart" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.fanart)]))
            __M_writer(u'/>\n                                                    &nbsp;Show Fanart\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_fanart">')
            __M_writer(unicode(cur_metadata_inst.eg_fanart))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_poster">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_poster" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.poster)]))
            __M_writer(u'/>\n                                                    &nbsp;Show Poster\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_poster">')
            __M_writer(unicode(cur_metadata_inst.eg_poster))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_banner">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_banner" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.banner)]))
            __M_writer(u'/>\n                                                    &nbsp;Show Banner\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_banner">')
            __M_writer(unicode(cur_metadata_inst.eg_banner))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_episode_thumbnails">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_episode_thumbnails" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.episode_thumbnails)]))
            __M_writer(u'/>\n                                                    &nbsp;Episode Thumbnails\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_episode_thumbnails">')
            __M_writer(unicode(cur_metadata_inst.eg_episode_thumbnails))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_posters">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_posters" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.season_posters)]))
            __M_writer(u'/>\n                                                    &nbsp;Season Posters\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_season_posters">')
            __M_writer(unicode(cur_metadata_inst.eg_season_posters))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_banners">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_banners" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.season_banners)]))
            __M_writer(u'/>\n                                                    &nbsp;Season Banners\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_season_banners">')
            __M_writer(unicode(cur_metadata_inst.eg_season_banners))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_all_poster">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_all_poster" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.season_all_poster)]))
            __M_writer(u'/>\n                                                    &nbsp;Season All Poster\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_season_all_poster">')
            __M_writer(unicode(cur_metadata_inst.eg_season_all_poster))
            __M_writer(u'</span>\n                                                </label>\n                                                <label for="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_all_banner">\n                                                    <input type="checkbox" class="float-left metadata_checkbox" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_season_all_banner" ')
            __M_writer(unicode(('', 'checked="checked"')[bool(cur_metadata_inst.season_all_banner)]))
            __M_writer(u'/>\n                                                    &nbsp;Season All Banner\n                                                    <br/>\n                                                    &nbsp;<span id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_eg_season_all_banner">')
            __M_writer(unicode(cur_metadata_inst.eg_season_all_banner))
            __M_writer(u'</span>\n                                                </label>\n                                            </div>\n                                        </div>\n                                        <input type="hidden" name="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_data" id="')
            __M_writer(unicode(cur_id))
            __M_writer(u'_data" value="')
            __M_writer(unicode(cur_metadata_inst.get_config()))
            __M_writer(u'" />\n                                    </div>\n')
        __M_writer(u'                            </div>\n                        </div>\n\n                    </fieldset>\n                </div>\n            </div>\n        </div>\n    </form>\n')
        return ''
    finally:
        context.caller_stack._pop_frame()


"""
__M_BEGIN_METADATA
{"source_encoding": "ascii", "line_map": {"16": 2, "38": 0, "51": 1, "52": 11, "57": 17, "62": 1516, "68": 13, "75": 13, "76": 14, "77": 14, "78": 15, "79": 15, "80": 16, "81": 16, "87": 19, "97": 19, "98": 27, "99": 27, "100": 28, "101": 28, "102": 36, "103": 36, "104": 41, "105": 41, "106": 42, "107": 42, "108": 47, "109": 47, "110": 47, "111": 47, "112": 55, "113": 55, "114": 60, "115": 60, "116": 65, "117": 65, "118": 70, "119": 70, "120": 70, "121": 70, "122": 78, "123": 78, "124": 84, "126": 84, "127": 85, "128": 86, "129": 86, "130": 86, "131": 86, "132": 86, "133": 86, "134": 86, "135": 88, "136": 93, "137": 93, "138": 98, "139": 98, "140": 98, "141": 98, "142": 106, "143": 106, "144": 111, "145": 111, "146": 116, "147": 116, "148": 124, "149": 124, "150": 127, "151": 127, "152": 128, "153": 128, "154": 134, "155": 134, "156": 139, "157": 139, "158": 144, "159": 144, "160": 152, "161": 152, "162": 155, "163": 155, "164": 156, "165": 156, "166": 162, "167": 162, "168": 165, "169": 165, "170": 166, "171": 166, "172": 172, "173": 172, "174": 175, "175": 175, "176": 176, "177": 176, "178": 182, "179": 182, "180": 185, "181": 185, "182": 186, "183": 186, "184": 192, "185": 192, "186": 195, "187": 195, "188": 196, "189": 196, "190": 202, "191": 202, "192": 207, "193": 207, "194": 208, "195": 208, "196": 213, "197": 213, "198": 221, "199": 221, "200": 224, "201": 224, "202": 225, "203": 225, "204": 231, "205": 231, "206": 236, "207": 236, "208": 237, "209": 237, "210": 242, "211": 242, "212": 242, "213": 242, "214": 250, "215": 250, "216": 256, "217": 257, "218": 257, "219": 257, "220": 257, "221": 257, "222": 257, "223": 257, "224": 259, "225": 264, "226": 264, "227": 272, "228": 272, "229": 276, "230": 276, "231": 284, "232": 284, "233": 285, "234": 285, "235": 287, "236": 287, "237": 288, "238": 288, "239": 290, "240": 290, "241": 291, "242": 291, "243": 298, "244": 298, "245": 298, "246": 298, "247": 301, "248": 302, "249": 304, "250": 304, "251": 304, "252": 304, "253": 308, "254": 313, "255": 313, "256": 318, "257": 318, "258": 324, "259": 324, "260": 332, "261": 332, "262": 337, "263": 337, "264": 343, "265": 343, "266": 351, "267": 351, "268": 356, "269": 356, "270": 362, "271": 362, "272": 370, "273": 370, "274": 375, "275": 375, "276": 376, "277": 376, "278": 381, "279": 381, "280": 381, "281": 381, "282": 391, "283": 391, "284": 396, "285": 396, "286": 397, "287": 397, "288": 402, "289": 402, "290": 402, "291": 402, "292": 411, "293": 411, "294": 417, "295": 417, "296": 418, "297": 418, "298": 423, "299": 423, "300": 423, "303": 425, "304": 433, "305": 433, "306": 438, "307": 438, "308": 439, "309": 439, "310": 444, "311": 444, "312": 452, "313": 452, "314": 457, "315": 457, "316": 463, "317": 463, "318": 466, "319": 466, "320": 483, "321": 483, "322": 484, "323": 484, "324": 492, "325": 492, "326": 496, "328": 496, "329": 497, "330": 498, "331": 498, "333": 498, "334": 499, "335": 500, "336": 500, "338": 500, "339": 502, "340": 502, "341": 502, "342": 502, "343": 502, "344": 502, "345": 502, "346": 504, "347": 504, "348": 504, "349": 504, "350": 504, "351": 516, "352": 516, "353": 517, "354": 517, "355": 522, "356": 522, "357": 522, "358": 522, "359": 533, "360": 533, "361": 534, "362": 534, "363": 535, "364": 535, "365": 540, "366": 540, "367": 545, "368": 545, "369": 547, "370": 547, "371": 552, "372": 552, "373": 557, "374": 557, "375": 560, "376": 560, "377": 570, "378": 570, "379": 580, "380": 580, "381": 590, "382": 590, "383": 600, "384": 600, "385": 602, "386": 602, "387": 607, "388": 607, "389": 612, "390": 612, "391": 615, "392": 615, "393": 617, "394": 617, "395": 622, "396": 622, "397": 627, "398": 627, "399": 630, "400": 630, "401": 632, "402": 632, "403": 637, "404": 637, "405": 642, "406": 642, "407": 645, "408": 645, "409": 660, "410": 660, "411": 675, "412": 675, "413": 677, "414": 677, "415": 680, "416": 680, "417": 680, "418": 680, "419": 685, "420": 685, "421": 685, "422": 685, "423": 697, "424": 697, "425": 701, "426": 702, "427": 702, "428": 702, "429": 702, "430": 702, "431": 702, "432": 702, "433": 704, "434": 711, "435": 711, "436": 722, "437": 722, "438": 733, "439": 733, "440": 738, "441": 738, "442": 739, "443": 739, "444": 744, "445": 744, "446": 752, "447": 752, "448": 755, "449": 755, "450": 756, "451": 756, "452": 764, "453": 764, "454": 768, "456": 768, "457": 769, "458": 770, "459": 770, "461": 770, "462": 771, "463": 772, "464": 772, "466": 772, "467": 774, "468": 774, "469": 774, "470": 774, "471": 774, "472": 774, "473": 774, "474": 776, "475": 776, "476": 776, "477": 776, "478": 776, "479": 787, "480": 787, "481": 789, "482": 789, "483": 798, "484": 798, "485": 799, "486": 799, "487": 800, "488": 800, "489": 805, "490": 805, "491": 810, "492": 810, "493": 812, "494": 812, "495": 817, "496": 817, "497": 822, "498": 822, "499": 825, "500": 825, "501": 845, "502": 845, "503": 847, "504": 847, "505": 852, "506": 852, "507": 857, "508": 857, "509": 860, "510": 860, "511": 875, "512": 875, "513": 880, "514": 880, "515": 890, "516": 890, "517": 900, "518": 900, "519": 900, "520": 900, "521": 902, "522": 902, "523": 905, "524": 905, "525": 905, "526": 905, "527": 910, "528": 910, "529": 910, "530": 910, "531": 938, "532": 938, "533": 941, "534": 941, "535": 942, "536": 942, "537": 950, "538": 950, "539": 954, "541": 954, "542": 955, "543": 956, "544": 956, "546": 956, "547": 957, "548": 958, "549": 958, "551": 958, "552": 960, "553": 960, "554": 960, "555": 960, "556": 960, "557": 960, "558": 960, "559": 962, "560": 962, "561": 962, "562": 962, "563": 962, "564": 972, "565": 972, "566": 974, "567": 974, "568": 983, "569": 983, "570": 984, "571": 984, "572": 985, "573": 985, "574": 990, "575": 990, "576": 995, "577": 995, "578": 997, "579": 997, "580": 1002, "581": 1002, "582": 1007, "583": 1007, "584": 1010, "585": 1010, "586": 1030, "587": 1030, "588": 1032, "589": 1032, "590": 1037, "591": 1037, "592": 1042, "593": 1042, "594": 1045, "595": 1045, "596": 1060, "597": 1060, "598": 1065, "599": 1065, "600": 1075, "601": 1075, "602": 1085, "603": 1085, "604": 1085, "605": 1085, "606": 1087, "607": 1087, "608": 1090, "609": 1090, "610": 1090, "611": 1090, "612": 1095, "613": 1095, "614": 1095, "615": 1095, "616": 1124, "617": 1124, "618": 1127, "619": 1127, "620": 1128, "621": 1128, "622": 1136, "623": 1136, "624": 1140, "626": 1140, "627": 1141, "628": 1142, "629": 1142, "631": 1142, "632": 1143, "633": 1144, "634": 1144, "636": 1144, "637": 1146, "638": 1146, "639": 1146, "640": 1146, "641": 1146, "642": 1146, "643": 1146, "644": 1148, "645": 1148, "646": 1148, "647": 1148, "648": 1148, "649": 1158, "650": 1158, "651": 1160, "652": 1160, "653": 1169, "654": 1169, "655": 1171, "656": 1171, "657": 1176, "658": 1176, "659": 1181, "660": 1181, "661": 1183, "662": 1183, "663": 1188, "664": 1188, "665": 1193, "666": 1193, "667": 1196, "668": 1196, "669": 1206, "670": 1206, "671": 1216, "672": 1216, "673": 1226, "674": 1226, "675": 1236, "676": 1236, "677": 1238, "678": 1238, "679": 1243, "680": 1243, "681": 1248, "682": 1248, "683": 1251, "684": 1251, "685": 1266, "686": 1266, "687": 1266, "688": 1266, "689": 1268, "690": 1268, "691": 1271, "692": 1271, "693": 1271, "694": 1271, "695": 1276, "696": 1276, "697": 1276, "698": 1276, "699": 1290, "700": 1290, "701": 1294, "702": 1295, "703": 1295, "704": 1295, "705": 1295, "706": 1295, "707": 1295, "708": 1295, "709": 1297, "710": 1304, "711": 1304, "712": 1316, "713": 1316, "714": 1327, "715": 1327, "716": 1332, "717": 1332, "718": 1333, "719": 1333, "720": 1338, "721": 1338, "722": 1346, "723": 1346, "724": 1351, "725": 1351, "726": 1352, "727": 1352, "728": 1357, "729": 1357, "730": 1365, "731": 1365, "732": 1370, "733": 1370, "734": 1371, "735": 1371, "736": 1376, "737": 1376, "738": 1395, "739": 1395, "740": 1396, "741": 1396, "742": 1405, "743": 1405, "744": 1411, "745": 1412, "746": 1412, "747": 1412, "748": 1412, "749": 1412, "750": 1414, "751": 1419, "752": 1419, "753": 1424, "754": 1424, "755": 1432, "756": 1432, "757": 1435, "758": 1436, "759": 1436, "764": 1439, "765": 1440, "766": 1440, "767": 1443, "768": 1443, "769": 1444, "770": 1444, "771": 1444, "772": 1444, "773": 1447, "774": 1447, "775": 1447, "776": 1447, "777": 1449, "778": 1449, "779": 1450, "780": 1450, "781": 1450, "782": 1450, "783": 1453, "784": 1453, "785": 1453, "786": 1453, "787": 1455, "788": 1455, "789": 1456, "790": 1456, "791": 1456, "792": 1456, "793": 1459, "794": 1459, "795": 1459, "796": 1459, "797": 1461, "798": 1461, "799": 1462, "800": 1462, "801": 1462, "802": 1462, "803": 1465, "804": 1465, "805": 1465, "806": 1465, "807": 1467, "808": 1467, "809": 1468, "810": 1468, "811": 1468, "812": 1468, "813": 1471, "814": 1471, "815": 1471, "816": 1471, "817": 1473, "818": 1473, "819": 1474, "820": 1474, "821": 1474, "822": 1474, "823": 1477, "824": 1477, "825": 1477, "826": 1477, "827": 1479, "828": 1479, "829": 1480, "830": 1480, "831": 1480, "832": 1480, "833": 1483, "834": 1483, "835": 1483, "836": 1483, "837": 1485, "838": 1485, "839": 1486, "840": 1486, "841": 1486, "842": 1486, "843": 1489, "844": 1489, "845": 1489, "846": 1489, "847": 1491, "848": 1491, "849": 1492, "850": 1492, "851": 1492, "852": 1492, "853": 1495, "854": 1495, "855": 1495, "856": 1495, "857": 1497, "858": 1497, "859": 1498, "860": 1498, "861": 1498, "862": 1498, "863": 1501, "864": 1501, "865": 1501, "866": 1501, "867": 1505, "868": 1505, "869": 1505, "870": 1505, "871": 1505, "872": 1505, "873": 1508, "879": 873}, "uri": "config_postProcessing.mako", "filename": "/app/sickrage/gui/slick/views/config_postProcessing.mako"}
__M_END_METADATA
"""
